"""
Main script that accepts a path to a configuration file and writes agent.cfg
according to it. If desired, a public and private key are also generated and
returned as part of the JSON result object.

Configuration files are expected to have two top-level keys as shown below:
```json
{
    "agent_config":{
        ...
    },
    "protocol_config":{
        ...
    }
}
```

`agent_config` should contain the keys that are specific to the agent's 
configuration. These are the keys exported by `agent.cfg`.

`protocol_config` should contain one key, equal in value to the `section_name`
attribute of the corresponding `ProtocolBase` class, whose value is a dictionary
of arguments supported by that protocol's corresponding `ProtocolConfig` class.

For example, if we wanted configuration for plaintext_local and Pygin, we'd
do something like
```json
{
    "agent_config":{
        "AGENT_ID" : "00000000...",
        ...
    },
    "protocol_config":{
        "plaintext_local":{
            "PLAINTEXT_LOCAL_CHECKIN_FREQUENCY": 10,
            "PLAINTEXT_LOCAL_INBOX_DIR": "./msgs/inbox"
            "PLAINTEXT_LOCAL_OUTBOX_DIR": "./msgs/outbox"
        }
    }
}
```

This script also performs some light validation, namely those provided by
Pydantic when the associated models for protocol configurations and agent
configuration are instantiated. Should any fail, the build is assumed to have
failed. Similar checks are performed to make sure that the specified
config keys and protocols actually exist.
"""

from pathlib import Path

# The default "input" JSON path.
DEFAULT_JSON_PATH = "./build_config.json"

def process_config_file(json_path: Path):
    """
    Process a configuration JSON5 file.
    
    When a field is required and no value has been provided, a random value
    is generated by default according to the field's default factory by
    Pydantic.
    """

if __name__ == "__main__":
    # Assert that our JSON5 file is there
    
    # Process the configuration file to generate a fully valid PyginConfig
    # model, as well as any nested models contained in the JSON file
    
    # Write the final PyginConfig instance back
    pass
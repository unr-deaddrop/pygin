; These are loaded dynamically each time the agent starts. They remain static
; for the lifetime of the agent; although they can be changed while the
; agent is running, they should not be.
;
; Notice that no effort is made to hide the mechanisms used to protect
; communications between the agent and the server on the agent's device
; itself.

[pygin]
; Configuration for Pygin's main program loop and tasking module.

; UUID representing the agent's ID as assigned by the server.
AGENT_ID=00000000-0000-0000-0000-000000000000

; The paths to the public and private keys included with this agent. The server
; should hold the agent's public key and the server's private key.
AGENT_PRIVATE_KEY_PATH=
SERVER_PUBLIC_KEY_PATH=

; The symmetric encryption key as base64. This is converted to a standard AES
; key at runtime.
ENCRYPTION_KEY=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=

; The protocols used to receive messages, comma-separated. This determines
; which protocols should be polled to check for new messages. Note that the
; protocols used to send messages is determined at runtime.
INCOMING_PROTOCOLS=dddb_local

; The selected protocols for various actions. For Pygin, this amounts to selecting
; the sole protocol in use; I am refraining from sending over multiple protocols,
; which may be risky.
; - Which protocol should be used in diagnostic/heartbeat/registration messages?
; - Which protocol should be used to send logging bundles?
; - Which protocol should be used to send all other messages (typically command_response)?
HEARTBEAT_PROTOCOL=dddb_local 
LOGGING_PROTOCOL=dddb_local
SENDING_PROTOCOL=dddb_local

; The Redis prefixes for various data manually stored by Pygin tasks.
; TODO: use https://docs.celeryq.dev/en/latest/userguide/extending.html#preload-options
; this allows us to load configuration at runtime. have the tasking module set
; the associated class variable(s) for PyginMessage when it's ready.

; The key used to store the set of all messages already seen, if used.
; This prevents accidentally processing the same message twice when used correctly.
; This should be used by the message dispatch unit as a best-effort to prevent 
; duplicate messages  from reaching the control unit's inbox (REDIS_NEW_MESSAGES_KEY).
REDIS_MESSAGES_SEEN_KEY=_agent_meta-seen-msgs

; The Redis key used to store the set of task IDs whose AsyncResults are lists of 
; PyginMessage. That is, this stores the IDs of all task results that should be 
; resolved by the main process and acted upon. The main process should delete
; AsyncResults and the elements in REDIS_NEW_MESSAGES_KEY once it's retrieved them.
;
; Note that with this inbox-based system, as opposed to the "search and delete" system
; used for the prototype agent, it is now acceptable to keep AsyncResults around for
; debugging purposes so long as their IDs are removed from this key. This can be used
; for debugging as needed by searching for celery-task-meta-* as usual.
REDIS_NEW_MESSAGES_KEY=_agent_meta-new-msg-task-ids
; In theory, it is not necessary that the main process maintains its own list of messages
; seen, since REDIS_MESSAGES_SEEN_KEY should be sufficient for the messaging module to
; prevent duplicate messages from reaching the main process. But this allows us to add
; some extra safety against random failures or IPC issues that I haven't seen.
REDIS_MAIN_PROCESS_MESSAGES_SEEN_KEY=_agent_meta-main-msgs-seen

; Where messages at each stage of the process should be stored. Note that each
; protocol may choose to use these folders differently; they are provided
; solely for debugging and convenience, and may not be used at all.
;
; In practice, a temp folder ought to be used for all of these instead, but
; it's helpful to see what messages looked like after the fact at the expense
; of storage. 
INCOMING_ENCODED_MESSAGE_DIR=./msgs/incoming_raw
INCOMING_DECODED_MESSAGE_DIR=./msgs/incoming_decoded
OUTGOING_DECODED_MESSAGE_DIR=./msgs/outgoing_decoded
OUTGOING_ENCODED_MESSAGE_DIR=./msgs/outgoing_raw

; Where logs should be stored.
LOG_DIR=./logs

[dddb_local]
; Configuration specific to the filesystem-based dddb protocol.

; How frequently should we check our inbox (in seconds)?
DDDB_LOCAL_CHECKIN_FREQUENCY=10

; Where should we expect new messages to be? (we'll copy them to INCOMING_ENCODED_MESSAGE_DIR
; before processing them)
DDDB_LOCAL_INBOX_DIR=./dddb_local/inbox
DDDB_LOCAL_OUTBOX_DIR=./dddb_local/outbox

[dddb_youtube]
; Configuration specific to the YouTube-based dddb protocol.